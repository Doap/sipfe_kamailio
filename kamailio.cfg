#!KAMAILIO

################################################################
#
#  This is a front-end SIP proxy configuration for the xlab1 project
#  See for more details: https://txlab.wordpress.com/tag/xlab1/
#  The configuration requires Kamailio version 3.3.x
#
#  This work is licensed under a Creative Commons Attribution 3.0 License
#  Author: Stanislav Sinyagin <ssinaygin@k-open.com>
#
################################################################



#   #!define WITH_DEBUG

####### Defined Values #########

#!define DBURL "text:///opt/sipfe/etc/kamailio_db"

#!define BACKEND_NET 10.100.0.0/24

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=4
log_stderror=no
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=2

auto_aliases=no

# to avoid simple attacks, use unconventional port
port=5066

# let kamailio choose the right source IP address
mhomed=1

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605


####### Modules Section ########

mpath="/opt/sipfe/lib64/kamailio/modules_k/:/opt/sipfe/lib64/kamailio/modules/"

loadmodule "db_text.so"

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"

loadmodule "path.so"
loadmodule "domain.so"
loadmodule "dispatcher.so"
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"


#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------


modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

modparam("nathelper", "received_avp", "$avp(RECEIVED)")
modparam("nathelper", "nortpproxy_str", "a=sdpmangled:yes\r\n")

modparam("path", "use_received", 1)

modparam("domain", "db_url", DBURL)

modparam("dispatcher", "db_url", DBURL)

modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:22222")


#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#!endif

####### Routing Logic ########


route {
    if (!sanity_check()) {
	    exit;
    }

    if ( !mf_process_maxfwd_header("10") )
    {
	 	sl_send_reply("483","To Many Hops");
	 	drop();
	};
    
    force_rport();

    if(src_ip != BACKEND_NET)
    {
        if (!lookup_domain("$td", "dattr_")) {
            xlog("L_ERR", "$rm $ru -- domain \"$td\" is not " +
                "found in domain table\n");
            drop();
        }
        
        if (!defined $avp(dattr_dispatcher_routeset))
        {
            xlog("L_ERR",
                "$rm $ru -- attribute \"dispatcher_routeset\" is undefined " +
                "for domain $td\n");
            drop();
        }

        # SIP request packet client->backend
        
        if (nat_uac_test("19")) {
            if (method=="REGISTER") {
                fix_nated_register();
            } else {
                fix_nated_contact();
            }
        }
          
        ds_select_dst("$avp(dattr_dispatcher_routeset)", "1");
        add_path_received();
        
        rtpproxy_manage("cwei");
    }
    else
    {
        # SIP request packet backend->client
        
        # Invites from backend contain Route field and it should be used
        # to reach the registered client
        loose_route(); 
        rtpproxy_manage("cwie");        
    }
    
	forward();
}


onreply_route {
    
    if(src_ip != BACKEND_NET)
    {
        # SIP reply packet client->backend
        
        fix_nated_contact();
        rtpproxy_manage("cwie");        
    }
    else
    {
        # SIP reply packet backend->client
        
        rtpproxy_manage("cwei");
    }
    
    return(1);
}



# Local Variables:
# mode: sh
# sh-indent-after-if: 0
# indent-tabs-mode: nil
# tab-width: 4
# End:
